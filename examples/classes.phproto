namespace test\myns;

abstract class SomeClass extends OtherClass implements SomeInterface, vendor\OtherInterface // comment
{

    /* Uses */
    use SomeTrait;

    /* Constants */
    const int       MY_INT_CONSTANT     = 1; /* comment */
    const float     MY_FLOAT_CONSTANT   = 0.1; // comment
    const bool      MY_BOOL_CONSTANT    = false; // comment
    const string    MT_STRING_CONSTANT  = "ok"; // comment

    /* Properties */
    var                 int             $a ;
    public static       string          $c = "ok" ;
    public readonly     string          $a ; // Yes, "readonly" is property modifier in this context.
    public              \myns\MyClass   $s = null ;
    protected static    vendor\Other[]  $_data = NULL ;

    /* Methods */
    public              string  myMethod ( void )
    public static       string  otherMethod( int $a, MyType $b1 = null, bool $c = false, string $d = 'default value' )
    protected           int     doSomething( int $a [, MyType $b [, bool $c [, string $d]]] )
    protected static    int     doSomethingElse()  // comment
    public              int[]   my( void )
    protected static myns\cls[] m( void )
    int doSome( void ) // Control. Should not work.

    /* Inherited methods */
    public          string  OtherClass::someMethod( void )
    public static   void    myns\MyOtherClass::myMethod( void )

}

final class OtherClass extends MyClass /* comment */ {

}

class MyClass /* comment */ implements SomeInterface
{

}

/* Standalone method declaration */
public      void    myapp\MyClass::myMethod ( void )
protected   int     MyClass::doSomething ( int $arg_one [, bool $arg_two = false [, myns\MyType $arg_three = null]] )
